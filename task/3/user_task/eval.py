# -*- coding: utf-8 -*-
import cv2
## TODO: Допишите импорт библиотек, которые собираетесь использовать


def load_etalon_list():
    """ Функция осуществляет загрузку изображений эталонных знаков.
        Вы можете провести бинаризацию эталонных изобраней здесь же. В этом случае
        верните список бинаризованных изображений.
        Если вы не собираетесь использовать эту функцию, пусть возвращает пустой список []
    """

    # TODO: Отредактируйте функцию по своему усмотрению.
    # Изображения - эталоны и решение упакуйте в архив "*.zip" и
    # загружайте на онлайн платформу в качестве решения

    # etalon_no_drive = cv2.imread("NoDrive.png")
    # etalon_stop = cv2.imread("Stop.jpg")
    # etalon_list = [etalon_no_drive,
    #                etalon_stop]

    etalon_list = []
    return etalon_list


def standardize_input(image):
    """Приведение изображений к стандартному виду.
    Входные данные: изображение (bgr); прочитаны cv2.imread()
    Выходные данные: стандартизированное изображений.
    """
    standard_im = image  # по умолчанию, функция не меняет изображения
    ## TODO: Если вы хотите преобразовать изображение в формат,
    ## одинаковый для всех изображений, сделайте это здесь.

    return standard_im


def predict_label_and_box(image, etalon_list):
    """
         Функция, детектирующая знаки и распознающая их
         Входные данные: изображение (bgr), список изображений эталонных знаков
         Выходные данные: список с метками объектов и координататами ограничивающих рамок

         Формат вывода: [[label, (x, y, x2, y2)]]
                        label - текстовая метка с названием знака
                        x и y - координаты левого верхнего угла ограничивающей рамки
                        x2 и y2 - координаты правого нижнего угла ограничивающей рамки

         Примеры вывода: [["PedestrianCrossing", (10, 14, 18, 25)],
                          ["Parking", (110, 114, 118, 215)]] - если обнаружили два знака

                         [["RoadWorks", (10, 11, 18, 15)]] - если обнаружили один знак

                         [] - если не обнаружили ни одного знака
    """

    ## TODO: Отредактируйте эту функцию по своему усмотрению.
    # Алгоритм проверки будет вызывать функции load_etalon_list и predict_label_and_box,
    # остальные функции должны вызываться из вешеперечисленных.

    standard_im = standardize_input(image)
    # predicted_label_and_box = ...  # Какой-то алгоритм
    # ...
    # ...

    predicted_label_and_box = [["NoDrive", (29, 80, 183, 229)],
                               ["Stop", (295, 97, 423, 211)],
                               ["NoDrive", (248, 100, 355, 204)]]

    return predicted_label_and_box
